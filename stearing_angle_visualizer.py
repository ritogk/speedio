import numpy as np
import matplotlib.pyplot as plt

# 座標のリスト
coords = [(137.7452939, 35.2569002), (137.7453502, 35.2569561), (137.7455533, 35.257158), (137.746768, 35.2582739), (137.7468343, 35.2583353), (137.7468568, 35.2583561), (137.747107, 35.2586265), (137.74715, 35.2587011), (137.7473812, 35.2591021), (137.7474697, 35.259337), (137.7475086, 35.2594692), (137.7475517, 35.2596698), (137.7476403, 35.2601731), (137.7476528, 35.2602441), (137.7476615, 35.2603), (137.7476757, 35.2603656), (137.7477267, 35.2606006), (137.7477939, 35.2608925), (137.7479555, 35.2617031), (137.7480072, 35.26187), (137.7480823, 35.2619925), (137.7482599, 35.2621088), (137.7500671, 35.2630277), (137.7504023, 35.2631981), (137.751086, 35.2635346), (137.751372, 35.263689), (137.7522198, 35.2640703), (137.7522668, 35.2640929), (137.7529312, 35.2644117), (137.7531274, 35.2645082), (137.7534932, 35.2646705), (137.754019, 35.2649142), (137.7546069, 35.2652567), (137.7548655, 35.2654232), (137.7549872, 35.2655219), (137.7550332, 35.2655643), (137.7551149, 35.2656396), (137.7553541, 35.2658602), (137.7555521, 35.2660757), (137.7558331, 35.2664927), (137.756032, 35.2668122), (137.7560427, 35.2668293), (137.7565468, 35.2676318), (137.7569807, 35.2683226), (137.7570625, 35.2684295), (137.7580133, 35.2701466), (137.7587412, 35.2713882), (137.7587679, 35.2714338), (137.7589107, 35.2716263), (137.7589585, 35.2716907), (137.7591892, 35.2719359), (137.7594762, 35.2721921), (137.7595485, 35.2722375), (137.7601951, 35.2726432), (137.760907, 35.273066), (137.7611258, 35.2732848), (137.761266, 35.273475), (137.7613886, 35.2738103), (137.7614584, 35.2742878), (137.7615871, 35.2748614), (137.7617909, 35.2753519), (137.761962, 35.275663), (137.7622415, 35.2760263), (137.7624937, 35.2763022), (137.7627995, 35.2765431), (137.7631106, 35.2767073), (137.7634351, 35.2768278), (137.7638294, 35.2769636), (137.7641459, 35.2771125), (137.7644141, 35.2773226), (137.7646394, 35.2775285), (137.7647896, 35.2777168), (137.7654388, 35.278562), (137.7657231, 35.2789255), (137.765935, 35.2790525), (137.7661469, 35.2791226), (137.76634, 35.2791291), (137.766517, 35.2790612), (137.7666779, 35.2788774), (137.7667262, 35.2786868), (137.766737, 35.2785095), (137.7666886, 35.2782029), (137.7666189, 35.2779576), (137.7666189, 35.2777781), (137.7666565, 35.2776468), (137.7668388, 35.2775373), (137.7671446, 35.2775329), (137.7673806, 35.2776292), (137.7677562, 35.2780015), (137.7680941, 35.2785248), (137.7684052, 35.2788992), (137.7687861, 35.2792058), (137.7691187, 35.279416), (137.7697698, 35.2798246), (137.7701202, 35.2800231), (137.7703244, 35.2802484), (137.770357, 35.2805), (137.7702311, 35.2808348), (137.7700755, 35.2810187), (137.7699522, 35.2812552), (137.7698906, 35.2815393), (137.7699256, 35.2818321), (137.7700814, 35.2821463), (137.7703847, 35.2826522), (137.7706452, 35.2833991), (137.7707677, 35.2835507), (137.7709314, 35.2836519), (137.771116, 35.2837103), (137.7713077, 35.283722), (137.7716976, 35.2837021), (137.7719339, 35.2836885), (137.7721581, 35.2837175), (137.7723026, 35.2838068), (137.7723789, 35.2838925), (137.772431, 35.284024), (137.7724299, 35.2841479), (137.7723887, 35.2842872), (137.7722768, 35.284445), (137.7721549, 35.2845255), (137.7719348, 35.2845955), (137.7715128, 35.2846613), (137.771312, 35.2847496), (137.7711791, 35.2848603), (137.7711285, 35.2849687), (137.771108, 35.2851126), (137.7711095, 35.2852487), (137.7711643, 35.2853759), (137.7712861, 35.285441), (137.7714616, 35.2855037), (137.7717077, 35.2855791), (137.7722084, 35.2857149), (137.7723254, 35.2858034), (137.7724327, 35.2859058), (137.7724935, 35.286105), (137.7724701, 35.2863005), (137.7723002, 35.286475), (137.7720512, 35.2865697), (137.7717798, 35.2865738), (137.7715847, 35.286502), (137.7714256, 35.286391), (137.7713685, 35.286206), (137.7714097, 35.2860197), (137.7715647, 35.2858167), (137.7717512, 35.2857261), (137.7718665, 35.2856738), (137.7720859, 35.2855919), (137.7724608, 35.2855258), (137.7729106, 35.2854207), (137.7730396, 35.2854056), (137.7732086, 35.2853941), (137.7733568, 35.2854097), (137.7734982, 35.2854453), (137.7736609, 35.2855046), (137.7737401, 35.2855518), (137.7738059, 35.2856045), (137.7738644, 35.2856698), (137.7739447, 35.285811), (137.7739845, 35.2859084), (137.7740369, 35.2860923), (137.7740528, 35.2862041), (137.7740427, 35.2863345), (137.7740111, 35.2864396), (137.7739265, 35.2865729), (137.7738074, 35.2866827), (137.7737473, 35.286729), (137.7735999, 35.2868286), (137.7734415, 35.2869008), (137.7730126, 35.2870555), (137.7726774, 35.2871663), (137.7725474, 35.2871931), (137.7723905, 35.287201), (137.7722504, 35.2871887), (137.7719094, 35.2871347), (137.7717067, 35.2871094), (137.7715357, 35.287118), (137.7713695, 35.2871539), (137.7712234, 35.2872081), (137.7711749, 35.287231), (137.7710706, 35.2873015), (137.7709977, 35.2873869), (137.7709296, 35.2874996), (137.7708989, 35.2876114), (137.7708801, 35.2877309), (137.7708814, 35.2878346), (137.7709023, 35.2879632), (137.7710571, 35.2883393), (137.771091, 35.2884162), (137.7712832, 35.2887749), (137.771758, 35.2891635), (137.7724196, 35.2893513), (137.7731287, 35.2893693), (137.7732438, 35.2893646), (137.7734613, 35.2893256), (137.7737478, 35.2892748), (137.774061, 35.2892105), (137.7745563, 35.28905), (137.774823, 35.2889591), (137.7749572, 35.2889172), (137.7751195, 35.2888833), (137.7752225, 35.2888731), (137.7753727, 35.2888698), (137.7755346, 35.2888887), (137.7756389, 35.2889166), (137.775733, 35.2889555), (137.7759184, 35.2890583), (137.7761407, 35.2892139), (137.7767765, 35.2896058), (137.7771439, 35.289853), (137.7772758, 35.289949), (137.7773975, 35.2900308), (137.7775091, 35.2901261), (137.7775641, 35.2902061), (137.777629, 35.2902868), (137.777662, 35.2904021), (137.7776774, 35.2907312), (137.7776327, 35.2912176), (137.777594, 35.2913492), (137.7775014, 35.2914859), (137.7773704, 35.2915869), (137.7772904, 35.2916469), (137.7772174, 35.2916819), (137.7769715, 35.2917225), (137.7767057, 35.2917538), (137.7763427, 35.2918058), (137.776186, 35.2918284), (137.7760078, 35.2918927), (137.7758402, 35.2920266), (137.7757465, 35.2922026), (137.7757221, 35.2923612), (137.7757605, 35.2925365), (137.775857, 35.2926817), (137.7759428, 35.2927553), (137.7760603, 35.2928258), (137.7761853, 35.2928831), (137.7764071, 35.2929336)]

def lat_lon_to_meters(lat, lon, ref_lat):
    """緯度経度をメートルに変換する関数"""
    lat_to_m = 111320  # 緯度1度あたりのメートル換算
    lon_to_m = 111320 * np.cos(np.deg2rad(ref_lat))  # 経度1度あたりのメートル換算（緯度に依存）
    return lat * lat_to_m, lon * lon_to_m

# 基準となる緯度を計算（最初の点の緯度を使用）
ref_lat = coords[0][1]

# 緯度経度をメートルに変換
points_m = np.array([lat_lon_to_meters(lat, lon, ref_lat) for lat, lon in coords])


# 車のパラメータ
wheelbase = 2.5  # 一般的な車のホイールベース（メートル）
steering_ratio = 15  # 一般的なステアリングギア比

# 3点を通る円の中心の座標と半径を計算
def calc_circle_center_and_radius(p1, p2, p3):
    # chatgptに作ってもらいました。
    temp = p2[0]**2 + p2[1]**2
    bc = (p1[0]**2 + p1[1]**2 - temp) / 2
    cd = (temp - p3[0]**2 - p3[1]**2) / 2
    det = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])

    if abs(det) < 1.0e-10:
        raise ValueError("Points are collinear")

    # 円の中心 (cx, cy)
    cx = (bc * (p2[1] - p3[1]) - cd * (p1[1] - p2[1])) / det
    cy = ((p1[0] - p2[0]) * cd - (p2[0] - p3[0]) * bc) / det

    # 半径
    radius = np.sqrt((cx - p1[0])**2 + (cy - p1[1])**2)

    return (cx, cy), radius

# ステアリング切れ角を計算
def steering_angle(wheelbase, radius, steering_ratio):
    tire_angle = np.arctan(wheelbase / radius) * (180 / np.pi)  # タイヤの回転角度を度に変換
    steering_wheel_angle = tire_angle * steering_ratio  # ステアリングホイールの回転角度
    return steering_wheel_angle

# 結果を保持するリスト
angles_info = []

# 3つのポイントずつ処理してステアリングホイールの回転角度を計算
for i in range(1, len(points_m) - 1):
    p1 = points_m[i - 1]
    p2 = points_m[i]
    p3 = points_m[i + 1]
    center, radius = calc_circle_center_and_radius(p1, p2, p3)
    angle = steering_angle(wheelbase, radius, steering_ratio)
    angles_info.append((i, coords[i], angle))

# 結果を出力
for i, coord, angle in angles_info:
    print(f"座標 {coord} でのステアリングホイールの回転角度: {angle:.2f} 度")

# プロット
plt.figure(figsize=(10, 10))
plt.plot(points_m[:, 0], points_m[:, 1], 'b-', label='Path')
plt.plot(points_m[:, 0], points_m[:, 1], 'ro', label='points',markersize=2, color='darkgray')

# ターンポイントをプロット
for i, coord, angle in angles_info:
    color= "green"
    size = 4
    if angle <= 15:
        continue
    if angle < 25:
        color = "orange"
        size = 4
    elif angle < 45:
        color="orange"
        size = 4
    elif angle < 65:
        color="orange"
        size = 7
    elif angle < 89:
        color="red"
        size = 9
    elif angle < 115:
        color="red"
        size = 12
    elif angle < 145:
        color="darkred"
        size = 14
    else:
        color="darkred"
        size = 20
    color="red"

    plt.plot(points_m[i, 0], points_m[i, 1], 'go', markersize=size, color=color, alpha=0.2)
        # if angle >= 45:
        #     plt.text(points_m[i, 0], points_m[i, 1], f"{angle:.2f}°", fontsize=7, ha='right')

plt.xlabel('Meters (X)')
plt.ylabel('Meters (Y)')
plt.legend()
plt.title('Turning Points with Steering Wheel Angles')
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')
plt.show()
